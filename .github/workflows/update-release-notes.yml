name: Update Release Notes

on:
  schedule:
    # Run every 6 hours to check for new releases
    - cron: '0 */6 * * *'
  workflow_dispatch:  # Allow manual triggering
  push:
    branches: [ main ]
    paths:
      - 'polkadot_release_analyzer.py'
      - '.github/workflows/update-release-notes.yml'

jobs:
  check-and-update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Check for new releases
      id: check_releases
      env:
        GITHUB_TOKEN: ${{ github.token }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        # Get the latest release from polkadot-fellows/runtimes
        LATEST_RELEASE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          https://api.github.com/repos/polkadot-fellows/runtimes/releases/latest \
          | jq -r .tag_name)
        
        echo "Latest release: $LATEST_RELEASE"
        echo "latest_release=$LATEST_RELEASE" >> $GITHUB_OUTPUT
        
        # Check if we already have this release analyzed
        if [ -f "docs/data/releases/${LATEST_RELEASE}.json" ]; then
          echo "Release $LATEST_RELEASE already analyzed"
          echo "needs_update=false" >> $GITHUB_OUTPUT
        else
          echo "New release found: $LATEST_RELEASE"
          echo "needs_update=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Analyze new release
      if: steps.check_releases.outputs.needs_update == 'true'
      env:
        GITHUB_TOKEN: ${{ github.token }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        LATEST_RELEASE="${{ steps.check_releases.outputs.latest_release }}"
        
        # Create directories
        mkdir -p docs/data/releases
        mkdir -p docs/data/metadata
        
        # Run the analyzer for the new release
        python scripts/polkadot_release_analyzer.py \
          --version "$LATEST_RELEASE" \
          --output "docs/data/releases/${LATEST_RELEASE}.md" \
          --json-output "docs/data/releases/${LATEST_RELEASE}.json"
        
        # Update the releases list
        python scripts/update_releases_index.py
        
        # Update SDK PR mappings using comprehensive branch-aware approach
        python scripts/comprehensive_branch_aware_mapper.py
    
    - name: Commit and push changes
      if: steps.check_releases.outputs.needs_update == 'true'
      run: |
        git config user.name github-actions
        git config user.email gh-actions@users.noreply.github.com
        git add docs/
        git diff --cached --quiet || git commit -m "Add release notes for ${{ steps.check_releases.outputs.latest_release }}" && git push
      continue-on-error: true  # don't fail if nothing changed